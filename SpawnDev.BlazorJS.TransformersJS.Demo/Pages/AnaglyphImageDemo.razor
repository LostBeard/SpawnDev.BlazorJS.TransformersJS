@page "/AnaglyphImageDemo"
@using SpawnDev.BlazorJS.JSObjects
@using SpawnDev.BlazorJS.TransformersJS.Demo.Services
@implements IDisposable

<div style="padding: 1rem;">
    <h3>2D to Anaglyph</h3>

    <RadzenStack Style="@(DepthEstimationService.ModelsLoaded ? "" : "display: none;")" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left" Gap="0.5rem">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left" Gap="0.5rem">
            <RadzenLabel Text="Anaglyph Mode" Component="DropDownBindValue" />
            <RadzenDropDown Disabled="@(busy || DepthEstimationService.Loading)" ValueChanged="AnaglyphModeChange" TValue="string" Value=@AnaglyphMode Data=@AnaglyphModes Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
            <input @ref=fileInputRef accept="image/*" type="file" disabled="@(busy || DepthEstimationService.Loading)" style="width: 100%;" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left" Gap="0.5rem">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left" Gap="0.5rem" Style="">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left" Gap="0.5rem" Style="padding: 1rem 0;">
                    <RadzenLabel Text="Focus" Component="@nameof(Focus3D)" class="rz-ms-2" />
                    <RadzenSlider Disabled="@(busy || DepthEstimationService.Loading)" Name="@nameof(Focus3D)" TValue="float" Value="@Focus3D" Max="1" Change="Focus3DChanged" Step="0.01" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left" Gap="0.5rem" Style="padding: 1rem 0;">
                    <RadzenLabel Text="3D Level" Component="@nameof(Level3D)" class="rz-ms-2" />
                    <RadzenSlider Disabled="@(busy || DepthEstimationService.Loading)" Name="@nameof(Level3D)" TValue="float" Value="@Level3D" Max="4" Change="Level3DChanged" Step="0.01" />
                </RadzenStack>
            </RadzenStack>
            <div style="padding: 4px;">
                <button style="margin: 2px;" onclick="@Download" disabled="@(busy || DepthEstimationService.Loading || string.IsNullOrEmpty(outputFileName))">Download: @(outputFileName)</button><br />
            </div>
        </RadzenStack>
    </RadzenStack>
    <div style="position: relative; display: inline-block;">
        <AnaglyphImage ProgressChanged="AnaglyphImage_OnProgressChanged" @ref=anaglyphImage Source="@Source2DImage" Focus3D="@Focus3D" Level3D="@Level3D" AnaglyphProfile="@AnaglyphProfile" />
        <div style="@(DepthEstimationService.ModelsLoaded && anaglyphImage?.Processing != true ? "display: none;" : "") text-align: center; background-color: rgba(15,15,15,0.3); border-radius: 15px; border: 2px solid gray; position: absolute; left: 50%; top: 50%; width: 100px; height: 100px; margin-left: -50px; margin-top: -50px;">
            <RadzenProgressBarCircular ShowValue="@(!DepthEstimationService.ModelsLoaded)" Mode="@(DepthEstimationService.ModelsLoaded ? ProgressBarMode.Indeterminate: ProgressBarMode.Determinate)" ProgressBarStyle="ProgressBarStyle.Primary" Value="@Math.Round(DepthEstimationService.OverallLoadProgress)" Size="ProgressBarCircularSize.Large" />
        </div>
    </div>
</div>

@code {
    [Inject]
    BlazorJSRuntime JS { get; set; } = default!;

    string Source2DImage => string.IsNullOrEmpty(SelectedFileObjectUrl) ? Source2DImageDefault : SelectedFileObjectUrl;
    string? SelectedFileObjectUrl = null;
    string sourceFileName = "National-Zoo.jpg";
    string Source2DImageDefault = "images/National-Zoo.jpg";
    float Focus3D = 0.5f;
    float Level3D = 1;
    AnaglyphImage? anaglyphImage = null;
    ElementReference fileInputRef;
    HTMLInputElement? fileInput;
    bool busy = false;
    string AnaglyphMode = AnaglyphModes.First();
    int AnaglyphProfile = 0;
    string outputFileName = "";
    string outputFileExt = "jpg";   // jpg, png, webp


    [Inject]
    DepthEstimationService DepthEstimationService { get; set; }

    async Task Download()
    {
        if (anaglyphImage == null) return;
        Console.WriteLine($"Download: {outputFileName}");
        await anaglyphImage.DownloadImage(outputFileName);
    }

    void AnaglyphImage_OnProgressChanged(bool busy)
    {
        StateHasChanged();
    }

    static List<string> AnaglyphModes = new List<string>
    {
        "Green Magenta",
        "Red Cyan",
    };
    void AnaglyphModeChange(string mode)
    {
        AnaglyphProfile = AnaglyphModes.IndexOf(mode);
        if (AnaglyphProfile < 0) AnaglyphProfile = 0;
        AnaglyphMode = AnaglyphModes[AnaglyphProfile];
        UpdateOutputFilename();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            fileInput = new HTMLInputElement(fileInputRef);
            fileInput.OnChange += FileInput_OnChange;
            DepthEstimationService.OnStateChange += DepthEstimationService_OnStateChange;
            UpdateOutputFilename();
        }
    }
    void DepthEstimationService_OnStateChange()
    {
        StateHasChanged();
    }
    async void FileInput_OnChange(Event ev)
    {
        if (!string.IsNullOrEmpty(SelectedFileObjectUrl))
        {
            URL.RevokeObjectURL(SelectedFileObjectUrl);
            SelectedFileObjectUrl = null;
        }
        using var Files = fileInput!.Files;
        using var File = Files!.FirstOrDefault();
        if (File == null)
        {
            return;
        }
        sourceFileName = File.Name;
        UpdateOutputFilename();
        busy = true;
        StateHasChanged();
        SelectedFileObjectUrl = await FileReader.ReadAsDataURLAsync(File);
        busy = false;
        StateHasChanged();
    }
    void UpdateOutputFilename()
    {
        outputFileName = MakeOutputFilename($".{AnaglyphMode.Replace(" ", "")}", outputFileExt) ?? "";
    }
    string? MakeOutputFilename(string? preExtensionTag = null, string? extension = null)
    {
        if (string.IsNullOrEmpty(sourceFileName)) return null;
        var ext = sourceFileName.Split('.').Last();
        var filenameBase = sourceFileName.Substring(0, sourceFileName.Length - ext.Length - 1);
        if (extension == null) extension = ext;
        var ret = filenameBase; //$"{filenameBase}.2DZ.{extension}";
        if (preExtensionTag != null)
        {
            ret += preExtensionTag;
        }
        ret += $".{extension}";
        return ret;
    }
    void Focus3DChanged(float args)
    {
        Focus3D = args;
        StateHasChanged();
    }
    void Level3DChanged(float args)
    {
        Level3D = args;
        StateHasChanged();
    }
    public void Dispose()
    {
        DepthEstimationService.OnStateChange -= DepthEstimationService_OnStateChange;
        if (!string.IsNullOrEmpty(SelectedFileObjectUrl))
        {
            URL.RevokeObjectURL(SelectedFileObjectUrl);
            SelectedFileObjectUrl = null;
        }
        if (fileInput != null)
        {
            fileInput.OnChange -= FileInput_OnChange;
            fileInput.Dispose();
        }
    }
}
